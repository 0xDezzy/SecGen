<?xml version="1.0"?>

<scenario xmlns="http://www.github/cliffe/SecGen/scenario"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.github/cliffe/SecGen/scenario">

  <name>Data Encoding and Hash Challenges</name>
  <author>Thomas Shaw</author>
  <description>Single system basic crypto CTF challenge.</description>

  <type>ctf</type>
  <type>crypto-ctf</type>
  <difficulty>easy</difficulty>

  <system>
    <system_name>system</system_name>
    <base platform="linux" type="desktop" distro="Stretch"/>

    <input into_datastore="IP_addresses">
      <value>172.16.0.12</value>
    </input>

    <!-- 6x encoding challenges per challenger -->
    <!-- 1: random encoder: ascii_reversible difficulty="low"-->
    <!-- 2: random encoder: alpha_reversible difficulty="low"-->
    <!-- 3: random encoder: ascii reversible difficulty="low"-->
    <!-- 4: random encoder: ascii_reversible difficulty="medium"-->
    <!-- 5: random encoder double encoded: ascii_reversible => ascii_reversible (no difficulty as double wrap is medium) -->
    <!-- 6: random encoder difficulty="high"-->

    <!-- 9x hash challenges per challenger -->
    <!-- 7:  Unsalted dictionary word -->
    <!-- 8:  Unsalted password -->
    <!-- 9:  Dictionary word - dictionary salt - salt not provided -->
    <!-- 10: Dictionary word - dictionary salt - salt provided -->
    <!-- 11: Random password - dictionary salt - salt provided -->
    <!-- 12: Random password - dictionary salt - salt not provided -->
    <!-- 13: Number - unsalted -->
    <!-- 14: Dictionary word - numerical salt - salt provided -->
    <!-- 15: Dictionary word - numerical salt - salt not provided -->

    <!-- Automatic installation of handy_cli_utilities, hash_tools, hashcat and john the ripper. -->

    <!--Datastore contains all challenges except #6 -->

    <input into_datastore="challenges" unique_module_list="unique_encoders">
      <!-- 1: random encoder -->
      <encoder type="ascii_reversible" difficulty="low">
        <input into="strings_to_encode">
          <generator type="flag_generator"/>
        </input>
      </encoder>

      <!-- 2: random encoder -->
      <encoder type="alpha_reversible" difficulty="low">
        <input into="strings_to_encode">
          <generator type="flag_generator"/>
        </input>
      </encoder>

      <!-- 3: random encoder -->
      <encoder type="ascii_reversible" difficulty="low">
        <input into="strings_to_encode">
          <generator type="flag_generator"/>
        </input>
      </encoder>

      <!-- 4: random encoder -->
      <encoder type="ascii_reversible" difficulty="medium">
        <input into="strings_to_encode">
          <generator type="flag_generator"/>
        </input>
      </encoder>

      <!-- 5: random encoder double encoded -->
      <encoder type="ascii_reversible">
        <input into="strings_to_encode">
          <encoder type="ascii_reversible">
            <input into="strings_to_encode">
              <generator type="flag_generator"/>
            </input>
          </encoder>
        </input>
      </encoder>

      <!-- 7: Unsalted dictionary word -->
      <encoder type="hash" difficulty="low">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_word_generator"/>
        </input>
      </encoder>

      <!-- 8: Unsalted password -->
      <encoder type="hash" difficulty="low">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="crackable_password_generator"/>
        </input>
      </encoder>

      <!-- 09: Dictionary word - dictionary salt - salt not provided-->
      <encoder type="hash" difficulty="low">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_word_generator" />
        </input>
        <input into="salt">
          <generator type="random_word_generator"/>
        </input>
        <input into="return_salts">
          <value>false</value>
        </input>
      </encoder>

      <!-- 10: Dictionary word - dictionary salt - salt provided-->
      <encoder type="hash" difficulty="medium">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_word_generator"/>
        </input>
        <input into="salt">
          <generator type="random_word_generator"/>
        </input>
        <input into="return_salts">
          <value>true</value>
        </input>
      </encoder>

      <!-- 11: Random password - dictionary salt - salt provided-->
      <encoder type="hash" difficulty="medium">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="crackable_password_generator"/>
        </input>
        <input into="salt">
          <generator type="random_word_generator"/>
        </input>
        <input into="return_salts">
          <value>true</value>
        </input>
      </encoder>

      <!-- 12: Random password - dictionary salt - salt not provided-->
      <encoder type="hash" difficulty="medium">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="crackable_password_generator"/>
        </input>
        <input into="salt">
          <generator type="random_word_generator"/>
        </input>
        <input into="return_salts">
          <value>false</value>
        </input>
      </encoder>

      <!-- 13: Number - unsalted-->
      <encoder type="hash" difficulty="high">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_number_generator">
            <input into="maximum">
              <value>10000000</value>
            </input>
          </generator>
        </input>
      </encoder>

      <!-- 14: Dictionary word - numerical salt - salt provided-->
      <encoder type="hash" difficulty="high">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_word_generator"/>
        </input>
        <input into="salt">
          <generator type="random_number_generator">
          <input into="maximum">
            <value>100</value>
          </input>
          </generator>
        </input>
        <input into="return_salts">
          <value>true</value>
        </input>
      </encoder>

      <!-- 15: Dictionary word - numerical salt - salt not provided-->
      <encoder type="hash" difficulty="high">
        <input into="strings_to_encode" into_datastore="hash_flags">
          <generator type="random_word_generator"/>
        </input>
        <input into="salt">
          <generator type="random_number_generator">
            <input into="maximum">
              <value>100</value>
            </input>
          </generator>
        </input>
        <input into="return_salts">
          <value>false</value>
        </input>
      </encoder>
    </input>

    <!-- Wrap hash_flags in flag{} so marker.xml picks them up -->
    <input into_datastore="wrapped_hash_flags">
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="0">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="1">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="2">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="3">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="4">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="5">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="6">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="7">hash_flags</datastore>
        </input>
      </generator>
      <generator type="concat_flag.*">
        <input into="strings_to_join">
          <datastore access="8">hash_flags</datastore>
        </input>
      </generator>
    </input>

    <!-- Local challenges -->
    <utility module_path=".*parameterised_accounts">
      <input into="accounts" into_datastore="accounts">
        <generator type="account">
          <input into="username">
            <value>challenger</value>
          </input>
          <input into="password">
            <value>tiaspbiqe2r</value>
          </input>
          <input into="super_user">
            <value>true</value>
          </input>
          <input into="strings_to_leak">
            <value>
              Welcome! This scenario involves solving a series of crypto / encoding / hash based challenges to find flags.
              The challenges can be found in the /home/challenger/challenges/ directory.

              The password for the challenger account is: tiaspbiqe2r

              Tools provided that you may find useful: hashcat, john the ripper
                `sudo john`
                `hashcat`

              For challenges 07 - 15 you will need to wrap the hashed word within the braces in the format 'flag{}'.
              Some inputs to the hash functions have been salted, when submitting the flag please omit the salt within your 'flag{}' string.

              Examples:

              Input asdf to md5
              [challenger@localhost ~]$ echo "asdf" | md5sum
              2b00042f7481c7b056c4b410d28f33cf  -

              Input asdf with an appended random salt of 1234 to md5sum(asdf1234)
              [challenger@localhost ~]$ echo "asdf1234" | md5sum
              622d1280547ccb5b88e05a6540665ca0  -

              Input asdf with a prepended random salt of 1234 to md5sum(1234asdf)
              [challenger@localhost ~]$ echo "1234asdf" | md5sum
              885ac5cfada75f388bd79f3615d3f9c8  -

              The expected flag for all of the above is: flag{asdf}

              Good luck, have fun.
            </value>
          </input>
          <input into="leaked_filenames">
            <value>instructions.txt</value>
          </input>
          <input into="data_to_leak">
            <generator type="leaked_data">
              <input into="data">
                <datastore access="0">challenges</datastore>
              </input>
              <input into="filename">
                <value>cipher</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_01</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="1">challenges</datastore>
              </input>
              <input into="filename">
                <value>cipher</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_02</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="2">challenges</datastore>
              </input>
              <input into="filename">
                <value>cipher</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_03</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="3">challenges</datastore>
              </input>
              <input into="filename">
                <value>cipher</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_04</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="4">challenges</datastore>
              </input>
              <input into="filename">
                <value>cipher</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_05</value>
              </input>
            </generator>

            <!--6: random misc high difficulty encoder -->
            <encoder type="compression" difficulty="high">
              <input into="strings_to_encode">
                <generator type="flag_generator"/>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_06</value>
              </input>
            </encoder>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="5">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_07</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="6">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_08</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="7">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_09</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="8">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_10</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="9">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_11</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="10">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_12</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="11">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_13</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="12">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_14</value>
              </input>
            </generator>

            <generator type="leaked_data">
              <input into="data">
                <datastore access="13">challenges</datastore>
              </input>
              <input into="filename">
                <value>hash</value>
              </input>
              <input into="subdirectory">
                <value>challenges/challenge_15</value>
              </input>
            </generator>

          </input>
        </generator>
      </input>
    </utility>

    <utility module_path=".*handy_cli_tools"/>
    <utility module_path=".*hash_tools"/>
    <utility module_path=".*hashcat"/>
    <utility module_path=".*johntheripper"/>

    <utility module_path=".*kde_minimal">
      <input into="accounts">
        <datastore>accounts</datastore>
      </input>
      <input into="autostart_konsole">
        <value>true</value>
      </input>
      <input into="autologin_user">
        <datastore access="0" access_json="['username']">accounts</datastore>
      </input>
    </utility>

    <network type="private_network">
      <input into="IP_address">
        <datastore access="0">IP_addresses</datastore>
      </input>
    </network>

  </system>

</scenario>
