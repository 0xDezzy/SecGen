### Tcpdump

This section gives a quick overview of the basics of network monitoring, using tools such as Tcpdump. Keep in mind that these are important foundations, and we will quickly build on these.

**From your ids_server VM.**

To view live network traffic, ==start tcpdump on the ids_server via ssh:==

```bash
tcpdump
```
> Tip: If running tcpdump generates the error "packet printing is not supported for link type USB\_Linux: use -w", then append "-i *eth0*" to each tcpdump command. (Where eth0 is the name of the interface as reported by ifconfig).

With tcpdump still running via ssh,  **from the desktop VM** ==perform a ping to the ids_server VM.==

```bash
ping <%= $ids_server_ip %>
```
> Run the above from the desktop VM (not from the tab SSHed to the ids_server).

> Note that tcpdump displays the network activity taking place, including the pings, and various TCP connections and ARP requests. Depending on your environment you might be seeing the traffic between various VMs.

The IDS server has a network card interface that can enter promiscuous mode, meaning that it can view traffic destined to other systems on the network. (Not just the traffic destined for the ids_server, as would normally be the case.)

Test this, **from the desktop** ==ping the web_server==:

```bash
ping <%= $web_server_ip %>
```
> If your network is configured correctly, from the Tcpdump running on the ids_server you should see the pings between these separate VMs (the desktop, and the web_server). Take the time to confirm that this is working.

Once you have seen tcpdump in action displaying these packets ==press Ctrl-C to exit.==

Tcpdump can format the output in various ways, showing various levels of detail.

**From the ids_server**, ==run:==

```bash
tcpdump -q
```
> This shows a less verbose version of the output.

**From the desktop** ==Ping the web_server VM again and observe the tcpdump output in the ssh session.==

```bash
tcpdump -A
```
> Shows the packet content without the information about the source and destination. 

When you ==access a web page in a browser on the desktop VM== (go ahead... ==reload this labsheet== webpage), Tcpdump will display the content, so long as the traffic is not SSL encrypted (for example, so long as the URL doesn't start with http**s**://).

==Ping the web_server again== and observe the output.

Stop tcpdump (Ctrl-C) on the ids_server VM once you have observed the output.

==Run the following== command **on the ids_server:**

```bash
tcpdump -v
```
> The above is even more verbose, showing lots of detail about the network traffic.

Now try the ==port scan again==. Note the very detailed output.

It is possible to write tcpdump network traffic to storage, so that it can be analysed later:
```bash
tcpdump -w /tmp/tcpdump-output
```

While that is running, ==access a web page from Firefox on the desktop VM== browse to:
> ==<%= $web_server_ip %>==

Then ==close tcpdump== (Ctrl-C).

To view the file containing the tcpdump output on the Kali VM type:

```bash
less /tmp/tcpdump-output
```
> (Press "y" to see the output if you are warned that it may be a binary file)

> You should be able to PageUp and PageDown through the file.

> Press "Q" to quit when ready

Run `man tcpdump` and read about the many options for output and filtering.

### Tcpdump filtering

We can also use tcpdump to do some simple monitoring of the network traffic to detect certain key words.

**On the ids_server**, ==run:==

```bash
tcpdump -A | grep "GET"
```
> Tip: if you are using a UK keyboard and the VM configured for US, the "|" symbol is located where "\~" is.

Open a web browser **on the desktop VM**, and visit [*http://<%= $web_server_ip %>*](http://<%= $web_server_ip %>), note that tcpdump captures *most* network content, and grep can be used to filter it down to lines that are interesting to us.

Note that making sense of this information using tcpdump and/or Wireshark is possible (and is a common sys-admin task), but the output is too noisy to be constantly and effectively monitored by a human to detect security incidents. Therefore we can use an IDS such as Snort to monitor and analyse the network traffic to detect activity that it is configured to alert.

Make sure tcpdump is stopped (Ctrl-C).
