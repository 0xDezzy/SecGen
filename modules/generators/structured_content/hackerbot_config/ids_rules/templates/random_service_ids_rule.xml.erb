	<attack>
<% $services = {'FTP'=>'20-20','SSH'=>'22','Telnet'=>'23','SMTP'=>'25','HTTP'=>'80','POP3'=>'110','IMAP'=>'143','SNMP'=>'161-162','LDAP'=>'389','HTTPS'=>'443','LDAPS'=>'636'} %>
<% $rand_service1 = $services.keys.sample %>
<% $rand_alert2 = SecureRandom.hex(3) %>
		<pre_shell>sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_before; stat1=$?; nmap -sT -p <%= $services[$rand_service1] %> <%= $web_server_ip %> > /dev/null; stat2=$?; sshpass -p <%= $root_password %> scp -prv -oStrictHostKeyChecking=no root@<%= $ids_server_ip %>:/var/log/snort/alert /tmp/snort_alert_after; stat3=$?; echo $stat1$stat2$stat3; diff -u /tmp/snort_alert_before /tmp/snort_alert_after</pre_shell>
		<get_shell>false</get_shell>
		<post_command></post_command>

		<prompt>Create a Snort rule that detects any TCP connection attempt to <%= $rand_service1 %> (just the connection attempt, does not require content inspection). The alert must include the message "<%= $rand_alert2 %>".</prompt>

		<condition>
			<output_matches>^1</output_matches>
			<message>:( Failed to scp to your system.</message>
		</condition>
		<condition>
			<output_matches>^01</output_matches>
			<message>:( Failed to scan your system.</message>
		</condition>
		<condition>
			<output_matches>^[01][01]1</output_matches>
			<message>:( Failed to scp to your system (the second time).</message>
		</condition>
		<condition>
			<output_matches>^00.*<%= $rand_alert2 %></output_matches>
			<message>:) Well done! <%= $flags.pop %>.</message>
			<trigger_next_attack />
		</condition>
		<else_condition>
			<message>:( Something was not right...</message>
		</else_condition>
	</attack>
